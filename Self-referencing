  #include <stdio.h>
  #include <stdlib.h>
  
  //Part 1: definitions
  #define TRUE 1
  #define FALSE 0
  typedef int BOOLEAN;
  
  //void insert(int x, struct Node **pL);
  
    //Part 2: declare node structure
  //Once structure is declared, create list in 
  //main method by declaring pointer to a node
  struct Node{
	int value;
	struct Node *next;
  };
  
  //Part 3: insert function must modify list (pointer to Node) --> sends pointer to list (pointer to a pointer to a Node)
  //the list is the pointer to the node
  void insert(int x, struct Node **pL){
	//Node *ptr;
	if((*pL) == NULL){
		(*pL) = malloc(sizeof(struct Node));			//allocate memory the size of Node
		//(**pL).value = x;
		(*pL)->value = x;
		(*pL)->next = NULL;
		//(**pL).next = NULL;
	}
	else if((*pL) != NULL){
		insert(x, &((*pL)->next));				//recursively calls insert function
		}
  }
  
   //Part 4: tests insert function
  void printList(struct Node * L){
	printf("%d\n", (L)->value);
	if((L)->next != NULL){
		printList((L)->next);
	}
  }
  
  //Part 5: lookup function
  BOOLEAN lookup(int x, struct Node * L){
	while(L != NULL){
		if((L)->value == x){
			return 1;
		}
		else{
			lookup(x, (L)->next);
		}
	}
	return 0;
 }

  
  //Part 6: delete function
  void delete(int x, struct Node **pL){
	(*pL) = (*pL) -> next;
  }
  

  
  main(int argc, char * argv[]){
	struct Node *L;
	int i;
	
	//fills the list
	for(i = 3; i < 20; i += 2){
		insert(i, &L);
	}
	printList(L);
	
	for (i = 0 ; i < 20; i++){
		printf("%d %s FOUND\n",i,((lookup(i,L) == TRUE)?"":" NOT "));
	}
}
